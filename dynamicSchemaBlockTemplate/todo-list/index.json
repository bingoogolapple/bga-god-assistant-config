{
    "type": "void",
    "x-component": "Div",
    "x-component-props": {
        "style": {
            "backgroundColor": "rgba(255,255,255,1)",
            "borderRadius": "8px 8px 8px 8px",
            "border": "1px solid #f0f0f0"
        }
    },
    "name": "todoAppCardDiv",
    "x-reactions": {
        "dependencies": [
            {
                "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                "property": "value",
                "type": "any"
            }
        ],
        "fulfill": {
            "run": "// 区块路径\nconst rootEntire = $self.address.entire\n// 只截取自己和父节点，避免拖动位置后数据丢失\nconst cacheKeyPrefix = $self.address.segments.slice(-2).join(\".\")\n\n// 修复样式问题\n$props({\n  className: $self.props.name,\n})\n$effect(() => {\n  const rootNode = document.querySelector(`.${$self.props.name}`)\n  if (rootNode) {\n    const element = rootNode.querySelector(\n      \".ant-formily-item-feedback-layout-loose\"\n    )\n    if (element) {\n      element.style.marginBottom = 0\n    }\n  }\n}, [])\n\n$self.crud = {\n  // 条目中文名称\n  itemChineseName: \"待办\",\n  // 条目表格组件的名称\n  itemTableName: `todoTable`,\n  // 添加或修改对话框的名称\n  addOrUpdateDialogName: `addOrUpdateTodoDialog`,\n  // 条目默认列表数据\n  defualtItemList: [],\n  // 条目列表持久化缓存的 key\n  cacheKeyItemList: `${cacheKeyPrefix}TodoApp`,\n  // 展示添加或修改条目对话框\n  showAddOrUpdateDialog(toAddOrUpdateItem) {\n    const addOrUpdateDialog = $self\n      .query(`${rootEntire}.${this.addOrUpdateDialogName}`)\n      .take()\n    addOrUpdateDialog.value = {\n      ...(toAddOrUpdateItem || {\n        completed: false,\n      }),\n    }\n\n    // 每次打开弹窗前都清空下表单错误\n    $form.clearErrors()\n\n    addOrUpdateDialog.setComponentProps({\n      open: true,\n      title: `${toAddOrUpdateItem ? \"修改\" : \"添加\"}${this.itemChineseName}`,\n    })\n  },\n  // 添加或修改条目\n  async addOrUpdateItem(toAddOrUpdateItem) {\n    const list = await this.fetchItemList()\n\n    if (toAddOrUpdateItem.id) {\n      // 修改\n      const index = list.findIndex((item) => item.id === toAddOrUpdateItem.id)\n      list[index] = toAddOrUpdateItem\n    } else {\n      // 添加\n      toAddOrUpdateItem.id = Date.now()\n      list.push(toAddOrUpdateItem)\n    }\n\n    await this.saveItemList(list)\n  },\n  // 删除条目\n  async deleteItem(toDeleteItem) {\n    let list = await this.fetchItemList()\n    list = list.filter((item) => item.id !== toDeleteItem.id)\n    await this.saveItemList(list)\n  },\n  // 往前移动条目\n  async moveUpItem(toMoveItem) {\n    let list = await this.fetchItemList()\n\n    const index = list.findIndex((item) => item.id === toMoveItem.id)\n    let preIndex = index - 1\n    if (preIndex === -1) {\n      // 已经是第一条，则和最后一条互换\n      preIndex = list.length - 1\n    }\n\n    const other = list[preIndex]\n    list[preIndex] = toMoveItem\n    list[index] = other\n\n    await this.saveItemList(list)\n  },\n  // 往后移动条目\n  async moveDownItem(toMoveItem) {\n    let list = await this.fetchItemList()\n\n    const index = list.findIndex((item) => item.id === toMoveItem.id)\n    let nextIndex = index + 1\n    if (nextIndex === list.length) {\n      // 已经是最后一条，则和第一条互换\n      nextIndex = 0\n    }\n\n    const other = list[nextIndex]\n    list[nextIndex] = toMoveItem\n    list[index] = other\n\n    await this.saveItemList(list)\n  },\n  // 保存条目列表数据\n  async saveItemList(newItemList) {\n    try {\n      const sortedItemList = newItemList.sort((itemA, itemB) => {\n        const itemACompleted = itemA.completed ? 1 : 0\n        const itemBCompleted = itemB.completed ? 1 : 0\n        if (itemACompleted !== itemBCompleted) {\n          return itemACompleted - itemBCompleted\n        }\n\n        return itemA.time > itemB.time ? 1 : itemA.time < itemB.time ? -1 : 0\n      })\n      await $chrome.localStorage.setItem(\n        this.cacheKeyItemList,\n        JSON.stringify(sortedItemList)\n      )\n\n      await this.refreshItemList()\n    } catch (e) {\n      $logger.info(`保存${this.itemChineseName}列表数据失败`, e)\n    }\n  },\n  // 获取条目列表\n  async fetchItemList() {\n    let res = null\n    try {\n      res = await $chrome.localStorage.getItem(this.cacheKeyItemList)\n    } catch (e) {\n      $logger.info(`获取${this.itemChineseName}列表失败`, e)\n      return []\n    }\n\n    if (!res) {\n      this.saveItemList(this.defualtItemList)\n      return this.defualtItemList\n    }\n\n    try {\n      const itemList = JSON.parse(res) || []\n      return itemList\n    } catch (e) {\n      $logger.info(`解析${this.itemChineseName}列表数据失败`, e)\n      return []\n    }\n  },\n\n  // 刷新条目列表\n  async refreshItemList() {\n    const itemList = await this.fetchItemList()\n\n    const itemListField = $self\n      .query(`${rootEntire}.${this.itemTableName}`)\n      .take()\n    if (itemListField) {\n      // 如果涉及到图片，则先清空在重新赋值，不然图片不会更新\n      // itemListField.value = []\n      itemListField.value = itemList\n    }\n\n    if (itemList.length > 0) {\n      // TODO 存在到时间还未完成的代码，发系统通知\n    }\n  },\n}\n\n$effect(() => {\n  $self.crud.refreshItemList()\n}, [])\n"
        }
    },
    "properties": {
        "headerDiv": {
            "type": "void",
            "x-component": "Div",
            "x-component-props": {
                "style": {
                    "display": "flex",
                    "flexDirection": "row",
                    "alignItems": "center",
                    "margin": "0px 0px 0px 0px",
                    "padding": "4px 10px 4px 10px",
                    "justifyContent": "space-between"
                }
            },
            "x-designable-id": "21k68736j3t",
            "x-index": 0,
            "name": "headerDiv",
            "properties": {
                "headerLeftDiv": {
                    "type": "void",
                    "x-component": "Div",
                    "x-component-props": {
                        "style": {
                            "display": "flex",
                            "flexDirection": "row",
                            "alignItems": "center",
                            "margin": "0px 0px 0px 0px",
                            "padding": "0px 0px 0px 0px",
                            "justifyContent": "flex-start"
                        }
                    },
                    "x-designable-id": "nnywm801yxs",
                    "x-index": 0,
                    "name": "headerLeftDiv",
                    "properties": {
                        "todoAppHeaderImg": {
                            "type": "string",
                            "x-component": "Img",
                            "x-validator": [],
                            "x-component-props": {
                                "src": "https://gitee.com/bingoogolapple/bga-god-assistant-config/raw/master/dynamicSchemaBlockTemplate/todo-list/icon.png",
                                "style": {
                                    "width": "20px",
                                    "height": "20px"
                                }
                            },
                            "x-designable-id": "sxqaace5v8h",
                            "x-index": 0,
                            "name": "todoAppHeaderImg"
                        },
                        "todoAppTitle": {
                            "type": "string",
                            "x-component": "Text",
                            "x-validator": [],
                            "x-component-props": {
                                "content": "待办清单",
                                "style": {
                                    "fontSize": "14px",
                                    "fontWeight": 700,
                                    "margin": "0px 0px 0px 4px"
                                }
                            },
                            "x-designable-id": "hm50gibwoui",
                            "x-index": 1,
                            "name": "todoAppTitle"
                        }
                    }
                },
                "addTodoBtn": {
                    "type": "string",
                    "x-component": "Button",
                    "x-reactions": {
                        "fulfill": {
                            "run": "const rootName = \"todoAppCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    rootField.crud.showAddOrUpdateDialog(null)\n  },\n})\n"
                        },
                        "dependencies": [
                            {
                                "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                                "property": "value",
                                "type": "any"
                            }
                        ]
                    },
                    "x-validator": [],
                    "x-component-props": {
                        "children": "",
                        "target": "_blank",
                        "icon": "PlusCircleOutlined",
                        "type": "default",
                        "size": "small"
                    },
                    "x-designable-id": "xwd27rrj15j",
                    "x-index": 1,
                    "name": "addTodoBtn"
                }
            }
        },
        "divider": {
            "type": "string",
            "x-component": "Divider",
            "x-validator": [],
            "x-component-props": {
                "children": "",
                "style": {
                    "margin": "0px 0px 4px 0px"
                }
            },
            "x-designable-id": "rbr1062ebha",
            "x-index": 1,
            "name": "divider"
        },
        "todoTable": {
            "type": "array",
            "x-decorator": "FormItem",
            "x-component": "ArrayTable",
            "x-validator": [],
            "x-component-props": {
                "bordered": false,
                "showHeader": true,
                "tableLayout": "fixed",
                "style": {
                    "margin": "0px 10px 0px 10px"
                }
            },
            "x-decorator-props": {},
            "x-designable-id": "n3q2kpuzko7",
            "x-index": 2,
            "name": "todoTable",
            "items": {
                "type": "object",
                "x-designable-id": "5ptax15yybb",
                "x-validator": [],
                "properties": {
                    "n2cy7p78jl9": {
                        "type": "void",
                        "x-component": "ArrayTable.Column",
                        "x-component-props": {
                            "title": "待办事项"
                        },
                        "x-designable-id": "n2cy7p78jl9",
                        "x-index": 0,
                        "properties": {
                            "title": {
                                "type": "string",
                                "x-component": "Text",
                                "x-validator": [],
                                "x-component-props": {},
                                "name": "title",
                                "x-designable-id": "frl8og25z6s",
                                "x-index": 0
                            }
                        }
                    },
                    "y6ar1ujnvf5": {
                        "type": "void",
                        "x-component": "ArrayTable.Column",
                        "x-component-props": {
                            "title": "截止时间",
                            "width": 170,
                            "align": "center"
                        },
                        "x-designable-id": "y6ar1ujnvf5",
                        "x-index": 1,
                        "properties": {
                            "time": {
                                "type": "string",
                                "x-component": "Text",
                                "x-validator": [],
                                "x-component-props": {},
                                "name": "time",
                                "x-designable-id": "0b19d77luuc",
                                "x-index": 0
                            }
                        }
                    },
                    "jojumsms5ki": {
                        "type": "void",
                        "x-component": "ArrayTable.Column",
                        "x-component-props": {
                            "title": "状态",
                            "width": 90,
                            "align": "center"
                        },
                        "x-designable-id": "jojumsms5ki",
                        "x-index": 2,
                        "properties": {
                            "completed": {
                                "type": "boolean",
                                "x-decorator": "FormItem",
                                "x-component": "Switch",
                                "x-validator": [],
                                "x-component-props": {
                                    "checkedChildren": "已完成",
                                    "unCheckedChildren": "未完成",
                                    "style": {},
                                    "size": "default"
                                },
                                "x-decorator-props": {},
                                "name": "completed",
                                "x-reactions": {
                                    "dependencies": [
                                        {
                                            "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                                            "property": "value",
                                            "type": "any"
                                        }
                                    ],
                                    "fulfill": {
                                        "run": "const rootName = \"todoAppCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onChange: async (completed) => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    await rootField.crud.addOrUpdateItem({\n      ...row,\n    })\n  },\n})\n"
                                    }
                                },
                                "x-designable-id": "lu66ncd7h0g",
                                "x-index": 0
                            }
                        }
                    },
                    "dxlfjs2bzmi": {
                        "type": "void",
                        "x-component": "ArrayTable.Column",
                        "x-component-props": {
                            "title": "操作",
                            "width": 90,
                            "align": "center"
                        },
                        "x-designable-id": "dxlfjs2bzmi",
                        "x-index": 3,
                        "properties": {
                            "deleteTodoBtn": {
                                "type": "string",
                                "x-component": "Button",
                                "x-reactions": {
                                    "fulfill": {
                                        "run": "const rootName = \"todoAppCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.crud.deleteItem(row)\n  },\n})\n"
                                    },
                                    "dependencies": [
                                        {
                                            "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                                            "property": "value",
                                            "type": "any"
                                        }
                                    ]
                                },
                                "x-validator": [],
                                "x-component-props": {
                                    "children": "",
                                    "target": "_blank",
                                    "icon": "DeleteOutlined",
                                    "style": {
                                        "margin": "0px 0px 0px 0px"
                                    },
                                    "size": "small"
                                },
                                "x-designable-id": "5k821e4fk7q",
                                "x-index": 0,
                                "name": "deleteTodoBtn"
                            },
                            "editTodoBtn": {
                                "type": "string",
                                "x-component": "Button",
                                "x-reactions": {
                                    "fulfill": {
                                        "run": "const rootName = \"todoAppCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.crud.showAddOrUpdateDialog(row)\n  },\n})\n"
                                    },
                                    "dependencies": [
                                        {
                                            "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                                            "property": "value",
                                            "type": "any"
                                        }
                                    ]
                                },
                                "x-validator": [],
                                "x-component-props": {
                                    "children": "",
                                    "target": "_blank",
                                    "icon": "EditOutlined",
                                    "style": {
                                        "margin": "0px 0px 0px 6px"
                                    },
                                    "size": "small"
                                },
                                "x-designable-id": "njllgtecfr6",
                                "x-index": 1,
                                "name": "editTodoBtn"
                            }
                        }
                    }
                }
            }
        },
        "addOrUpdateTodoDialog": {
            "type": "object",
            "x-component": "Modal",
            "x-reactions": {
                "fulfill": {
                    "run": "const rootName = \"todoAppCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  // 点击取消按钮\n  onCancel: () => {\n    $self.componentProps.open = false\n  },\n  // 点击确认按钮\n  onOk: () => {\n    $self\n      .validate() // 校验\n      .then(async () => {\n        const itemForm = $self.value\n        // $logger.info(\"$self.value\", itemForm)\n\n        // 添加或更新条目\n        await rootField.crud.addOrUpdateItem({\n          ...itemForm,\n        })\n\n        // 关闭当前对话框\n        $self.componentProps.open = false\n      })\n      .catch((e) => {\n        $logger.info(\"表单校验失败\", e)\n      })\n  },\n})\n"
                },
                "dependencies": [
                    {
                        "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                        "property": "value",
                        "type": "any"
                    }
                ]
            },
            "x-component-props": {
                "cancelButtonProps": {},
                "cancelText": "取消",
                "okButtonProps": {},
                "okText": "确定",
                "classNames": {},
                "styles": {},
                "title": "添加待办"
            },
            "name": "addOrUpdateTodoDialog",
            "x-designable-id": "nvk85zsjjo4",
            "x-index": 3,
            "properties": {
                "title": {
                    "type": "string",
                    "title": "待办事项",
                    "x-decorator": "FormItem",
                    "x-component": "Input",
                    "x-validator": [],
                    "x-component-props": {
                        "placeholder": "请输入待办事项",
                        "allowClear": true
                    },
                    "x-decorator-props": {},
                    "name": "title",
                    "required": true,
                    "x-designable-id": "erzgaas5txp",
                    "x-index": 0
                },
                "time": {
                    "type": "string",
                    "title": "截止时间",
                    "x-decorator": "FormItem",
                    "x-component": "DatePicker",
                    "x-validator": [],
                    "x-component-props": {
                        "picker": "date",
                        "showTime": true,
                        "showToday": false,
                        "showNow": false,
                        "placeholder": "请选择完成时间"
                    },
                    "x-decorator-props": {},
                    "name": "time",
                    "required": true,
                    "x-designable-id": "w82v6sv04bl",
                    "x-index": 1
                },
                "completed": {
                    "type": "boolean",
                    "title": "是否已完成",
                    "x-decorator": "FormItem",
                    "x-component": "Switch",
                    "x-validator": [],
                    "x-component-props": {},
                    "x-decorator-props": {},
                    "name": "completed",
                    "required": true,
                    "default": false,
                    "x-designable-id": "6gvkxmbdcwq",
                    "x-index": 2
                }
            }
        }
    }
}