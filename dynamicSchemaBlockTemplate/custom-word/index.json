{
  "type": "void",
  "x-component": "Div",
  "x-component-props": {
    "style": {
      "margin": "0px 0px 0px 0px",
      "backgroundColor": "rgba(255,255,255,1)",
      "borderRadius": "20px 20px 20px 20px"
    }
  },
  "name": "customWordCardDiv",
  "x-reactions": {
    "dependencies": [
      {
        "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
        "property": "value",
        "type": "any"
      }
    ],
    "fulfill": {
      "run": "// 区块路径\nconst rootEntire = $self.address.entire\n// 只截取自己和父节点，避免拖动位置后数据丢失\nconst cacheKeyPrefix = $self.address.segments.slice(-2).join(\".\")\n\n// 修复样式问题\n$props({\n  className: $self.props.name,\n})\n$effect(() => {\n  const rootNode = document.querySelector(`.${$self.props.name}`)\n  if (rootNode) {\n    const element = rootNode.querySelector(\n      \".ant-formily-item-feedback-layout-loose\"\n    )\n    if (element) {\n      element.style.marginBottom = 0\n    }\n  }\n}, [])\n\n// 展示页面内通知和系统通知\nconst sendNotification = (item) => {\n  $message.success(`${item.learningLanguage} ${item.fromLanguage}`)\n\n  // 创建系统通知\n  $chrome.notifications.create(\n    null,\n    {\n      type: \"basic\",\n      title: item.learningLanguage,\n      message: item.fromLanguage,\n      iconUrl:\n        \"https://d35aaqx5ub95lt.cloudfront.net/images/pathCharacters/guidebook/939ebad747027f1a9d365e15fda3a4e1.svg\",\n    },\n    $chrome.proxy((notificationId) => {\n      // 延迟 6 秒清除系统通知\n      setTimeout(() => {\n        $chrome.notifications.clear(notificationId)\n      }, 6000)\n    })\n  )\n}\n\n$self.crud = {\n  // 条目中文名称\n  itemChineseName: \"自定义单词\",\n  // 条目表格组件的名称\n  itemTableName: `customWordTable`,\n  // 添加或修改对话框的名称\n  addOrUpdateDialogName: `addOrUpdateCustomWordDialog`,\n  // 条目默认列表数据\n  defualtItemList: [],\n  // 条目列表持久化缓存的 key\n  cacheKeyItemList: `${cacheKeyPrefix}CustomWordList`,\n  // 展示添加或修改条目对话框\n  showAddOrUpdateDialog(toAddOrUpdateItem) {\n    const addOrUpdateDialog = $self\n      .query(`${rootEntire}.${this.addOrUpdateDialogName}`)\n      .take()\n    addOrUpdateDialog.value = {\n      ...(toAddOrUpdateItem || {}),\n    }\n    addOrUpdateDialog.setComponentProps({\n      open: true,\n      title: `${toAddOrUpdateItem ? \"修改\" : \"添加\"}${this.itemChineseName}`,\n    })\n  },\n  // 添加或修改条目\n  async addOrUpdateItem(toAddOrUpdateItem) {\n    const list = await this.fetchItemList()\n\n    if (toAddOrUpdateItem.id) {\n      // 修改\n      const index = list.findIndex((item) => item.id === toAddOrUpdateItem.id)\n      list[index] = toAddOrUpdateItem\n    } else {\n      // 添加\n      toAddOrUpdateItem.id = Date.now()\n      list.push(toAddOrUpdateItem)\n    }\n\n    await this.saveItemList(list)\n  },\n  // 删除条目\n  async deleteItem(toDeleteItem) {\n    let list = await this.fetchItemList()\n    list = list.filter((item) => item.id !== toDeleteItem.id)\n    await this.saveItemList(list)\n  },\n  // 往前移动条目\n  async moveUpItem(toMoveItem) {\n    let list = await this.fetchItemList()\n\n    const index = list.findIndex((item) => item.id === toMoveItem.id)\n    let preIndex = index - 1\n    if (preIndex === -1) {\n      // 已经是第一条，则和最后一条互换\n      preIndex = list.length - 1\n    }\n\n    const other = list[preIndex]\n    list[preIndex] = toMoveItem\n    list[index] = other\n\n    await this.saveItemList(list)\n  },\n  // 往后移动条目\n  async moveDownItem(toMoveItem) {\n    let list = await this.fetchItemList()\n\n    const index = list.findIndex((item) => item.id === toMoveItem.id)\n    let nextIndex = index + 1\n    if (nextIndex === list.length) {\n      // 已经是最后一条，则和第一条互换\n      nextIndex = 0\n    }\n\n    const other = list[nextIndex]\n    list[nextIndex] = toMoveItem\n    list[index] = other\n\n    await this.saveItemList(list)\n  },\n  // 保存条目列表数据\n  async saveItemList(newItemList) {\n    try {\n      await $chrome.localStorage.setItem(\n        this.cacheKeyItemList,\n        JSON.stringify(newItemList)\n      )\n\n      await this.refreshItemList()\n    } catch (e) {\n      $logger.info(`保存${this.itemChineseName}列表数据失败`, e)\n    }\n  },\n  // 获取条目列表\n  async fetchItemList() {\n    let res = null\n    try {\n      res = await $chrome.localStorage.getItem(this.cacheKeyItemList)\n    } catch (e) {\n      $logger.info(`获取${this.itemChineseName}列表失败`, e)\n      return []\n    }\n\n    if (!res) {\n      this.saveItemList(this.defualtItemList)\n      return this.defualtItemList\n    }\n\n    try {\n      const itemList = JSON.parse(res) || []\n      return itemList\n    } catch (e) {\n      $logger.info(`解析${this.itemChineseName}列表数据失败`, e)\n      return []\n    }\n  },\n\n  // 刷新条目列表\n  async refreshItemList() {\n    const itemList = await this.fetchItemList()\n\n    const itemListField = $self\n      .query(`${rootEntire}.${this.itemTableName}`)\n      .take()\n    if (itemListField) {\n      // 如果涉及到图片，则先清空在重新赋值，不然图片不会更新\n      // itemListField.value = []\n      itemListField.value = itemList\n    }\n\n    if (itemList.length > 0) {\n      const randomIndex = parseInt(Math.random() * itemList.length)\n      const randomItem = itemList[randomIndex]\n      sendNotification(randomItem)\n    }\n  },\n}\n\n$effect(() => {\n  $self.crud.refreshItemList()\n}, [])\n"
    }
  },
  "properties": {
    "headerDiv": {
      "type": "void",
      "x-component": "Div",
      "x-component-props": {
        "style": {
          "display": "flex",
          "flexDirection": "row",
          "alignItems": "center",
          "margin": "0px 0px 0px 0px",
          "padding": "8px 10px 8px 10px",
          "justifyContent": "space-between"
        }
      },
      "x-designable-id": "rbzdiyic885",
      "x-index": 0,
      "name": "headerDiv",
      "properties": {
        "headerLeftDiv": {
          "type": "void",
          "x-component": "Div",
          "x-component-props": {
            "style": {
              "display": "flex",
              "flexDirection": "row",
              "alignItems": "center",
              "margin": "0px 0px 0px 0px",
              "padding": "0px 0px 0px 0px",
              "justifyContent": "flex-start"
            }
          },
          "x-designable-id": "5s32ao6hsy3",
          "x-index": 0,
          "name": "headerLeftDiv",
          "properties": {
            "customWordHeaderImg": {
              "type": "string",
              "x-component": "Img",
              "x-validator": [],
              "x-component-props": {
                "src": "https://d35aaqx5ub95lt.cloudfront.net/images/pathCharacters/guidebook/939ebad747027f1a9d365e15fda3a4e1.svg",
                "style": {
                  "width": "40px",
                  "height": "50px"
                }
              },
              "x-designable-id": "3cpgoly1zjb",
              "x-index": 0,
              "name": "customWordHeaderImg"
            },
            "customWordTitle": {
              "type": "string",
              "x-component": "Text",
              "x-validator": [],
              "x-component-props": {
                "content": "自定义单词卡片",
                "style": {
                  "fontSize": "16px",
                  "fontWeight": 700,
                  "margin": "0px 0px 0px 4px"
                }
              },
              "x-designable-id": "iu5nkp6jf1q",
              "x-index": 1,
              "name": "customWordTitle"
            }
          }
        },
        "addCustomWordBtn": {
          "type": "string",
          "x-component": "Button",
          "x-reactions": {
            "fulfill": {
              "run": "const rootName = \"customWordCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    rootField.crud.showAddOrUpdateDialog(null)\n  },\n})\n"
            },
            "dependencies": [
              {
                "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                "property": "value",
                "type": "any"
              }
            ]
          },
          "x-validator": [],
          "x-component-props": {
            "children": "",
            "target": "_blank",
            "icon": "PlusCircleOutlined",
            "type": "default"
          },
          "x-designable-id": "ip73usf50ot",
          "x-index": 1,
          "name": "addCustomWordBtn"
        }
      }
    },
    "divider": {
      "type": "string",
      "x-component": "Divider",
      "x-validator": [],
      "x-component-props": {
        "children": "",
        "style": {
          "margin": "4px 0px 4px 0px"
        }
      },
      "x-designable-id": "thsg0ktdovs",
      "x-index": 1,
      "name": "divider"
    },
    "customWordTable": {
      "type": "array",
      "x-decorator": "FormItem",
      "x-component": "ArrayTable",
      "x-validator": [],
      "x-component-props": {
        "bordered": false,
        "showHeader": true,
        "tableLayout": "fixed",
        "style": {
          "margin": "0px 10px 0px 10px"
        }
      },
      "x-decorator-props": {},
      "x-designable-id": "fgoj0jwud2k",
      "x-index": 2,
      "name": "customWordTable",
      "items": {
        "type": "object",
        "x-designable-id": "101atc56jq0",
        "x-validator": [],
        "properties": {
          "e7o9x7nsodu": {
            "type": "void",
            "x-component": "ArrayTable.Column",
            "x-component-props": {
              "title": "学的语言"
            },
            "x-designable-id": "e7o9x7nsodu",
            "x-index": 0,
            "properties": {
              "learningLanguage": {
                "type": "string",
                "x-component": "Text",
                "x-validator": [],
                "x-component-props": {},
                "name": "learningLanguage",
                "x-designable-id": "gnt5jlp82b4",
                "x-index": 0
              }
            }
          },
          "grmu00lg07i": {
            "type": "void",
            "x-component": "ArrayTable.Column",
            "x-component-props": {
              "title": "我的语言"
            },
            "x-designable-id": "grmu00lg07i",
            "x-index": 1,
            "properties": {
              "fromLanguage": {
                "type": "string",
                "x-component": "Text",
                "x-validator": [],
                "x-component-props": {},
                "name": "fromLanguage",
                "x-designable-id": "t5u6hns1eit",
                "x-index": 0
              }
            }
          },
          "spznivuol6h": {
            "type": "void",
            "x-component": "ArrayTable.Column",
            "x-component-props": {
              "title": "操作",
              "width": 165
            },
            "x-designable-id": "spznivuol6h",
            "x-index": 2,
            "properties": {
              "deleteCustomWordBtn": {
                "type": "string",
                "x-component": "Button",
                "x-reactions": {
                  "fulfill": {
                    "run": "const rootName = \"customWordCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.crud.deleteItem(row)\n  },\n})\n"
                  },
                  "dependencies": [
                    {
                      "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                      "property": "value",
                      "type": "any"
                    }
                  ]
                },
                "x-validator": [],
                "x-component-props": {
                  "children": "",
                  "target": "_blank",
                  "icon": "DeleteOutlined",
                  "style": {
                    "margin": "0px 0px 0px 0px"
                  }
                },
                "x-designable-id": "c4p6xhtbp7c",
                "x-index": 0,
                "name": "deleteCustomWordBtn"
              },
              "moveUpCustomWordBtn": {
                "type": "string",
                "x-component": "Button",
                "x-reactions": {
                  "fulfill": {
                    "run": "const rootName = \"customWordCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.crud.moveUpItem(row)\n  },\n})\n"
                  },
                  "dependencies": [
                    {
                      "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                      "property": "value",
                      "type": "any"
                    }
                  ]
                },
                "x-validator": [],
                "x-component-props": {
                  "children": "",
                  "target": "_blank",
                  "icon": "ArrowUpOutlined",
                  "style": {
                    "margin": "0px 0px 0px 6px"
                  }
                },
                "x-designable-id": "y34ahvz9qnk",
                "x-index": 1,
                "name": "moveUpCustomWordBtn"
              },
              "moveDownCustomWordBtn": {
                "type": "string",
                "x-component": "Button",
                "x-reactions": {
                  "fulfill": {
                    "run": "const rootName = \"customWordCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.crud.moveDownItem(row)\n  },\n})\n"
                  },
                  "dependencies": [
                    {
                      "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                      "property": "value",
                      "type": "any"
                    }
                  ]
                },
                "x-validator": [],
                "x-component-props": {
                  "children": "",
                  "target": "_blank",
                  "icon": "ArrowDownOutlined",
                  "style": {
                    "margin": "0px 0px 0px 6px"
                  }
                },
                "x-designable-id": "54tdogcyjpb",
                "x-index": 2,
                "name": "moveDownCustomWordBtn"
              },
              "editCustomWordBtn": {
                "type": "string",
                "x-component": "Button",
                "x-reactions": {
                  "fulfill": {
                    "run": "const rootName = \"customWordCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.crud.showAddOrUpdateDialog(row)\n  },\n})\n"
                  },
                  "dependencies": [
                    {
                      "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                      "property": "value",
                      "type": "any"
                    }
                  ]
                },
                "x-validator": [],
                "x-component-props": {
                  "children": "",
                  "target": "_blank",
                  "icon": "EditOutlined",
                  "style": {
                    "margin": "0px 0px 0px 6px"
                  }
                },
                "x-designable-id": "9y6r6aa2hpa",
                "x-index": 3,
                "name": "editCustomWordBtn"
              }
            }
          }
        }
      }
    },
    "addOrUpdateCustomWordDialog": {
      "type": "object",
      "x-component": "Modal",
      "x-reactions": {
        "fulfill": {
          "run": "const rootName = \"customWordCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.lastIndexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  // 点击取消按钮\n  onCancel: () => {\n    $self.componentProps.open = false\n  },\n  // 点击确认按钮\n  onOk: () => {\n    $self\n      .validate() // 校验\n      .then(async () => {\n        const itemForm = $self.value\n        // $logger.info(\"$self.value\", itemForm)\n\n        // 添加或更新条目\n        await rootField.crud.addOrUpdateItem({\n          ...itemForm\n        })\n\n        // 关闭当前对话框\n        $self.componentProps.open = false\n      })\n      .catch((e) => {\n        $logger.info(\"表单校验失败\", e)\n      })\n  },\n})\n"
        },
        "dependencies": [
          {
            "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
            "property": "value",
            "type": "any"
          }
        ]
      },
      "x-component-props": {
        "cancelButtonProps": {},
        "cancelText": "取消",
        "okButtonProps": {},
        "okText": "确定",
        "classNames": {},
        "styles": {},
        "title": "添加自定义单词"
      },
      "name": "addOrUpdateCustomWordDialog",
      "x-designable-id": "zh91a19h98u",
      "x-index": 3,
      "properties": {
        "learningLanguage": {
          "type": "string",
          "title": "学的语言",
          "x-decorator": "FormItem",
          "x-component": "Input",
          "x-validator": [],
          "x-component-props": {
            "placeholder": "请输入所学语言的单词"
          },
          "x-decorator-props": {},
          "name": "learningLanguage",
          "required": true,
          "x-designable-id": "ivvx1q89d4o",
          "x-index": 0
        },
        "fromLanguage": {
          "type": "string",
          "title": "我的语言",
          "x-decorator": "FormItem",
          "x-component": "Input",
          "x-validator": [],
          "x-component-props": {
            "placeholder": "请输入单词对应的我的语言"
          },
          "x-decorator-props": {},
          "required": true,
          "name": "fromLanguage",
          "x-designable-id": "syaa2ij9lre",
          "x-index": 1
        }
      }
    }
  }
}