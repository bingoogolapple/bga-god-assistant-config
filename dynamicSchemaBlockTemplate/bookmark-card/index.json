{
    "type": "void",
    "x-component": "Div",
    "x-component-props": {
      "style": {
        "margin": "16px 16px 16px 16px",
        "backgroundColor": "rgba(255,255,255,1)",
        "borderRadius": "20px 20px 20px 20px"
      }
    },
    "name": "bookmarkCardDiv",
    "x-reactions": {
      "dependencies": [
        {
          "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
          "property": "value",
          "type": "any"
        }
      ],
      "fulfill": {
        "run": "const rootEntire = $self.address.entire\n// 书签列表持久化缓存的 key\nconst cacheKeyBookmarkList = `${rootEntire}BookmarkList`\n// 书签样式持久化缓存的 key\nconst cacheKeyBookmarkStyle = `${rootEntire}BookmarkStyle`\n// 默认书签样式\nconst defaultBookmarkStyle = \"verticalImgAndText\"\n\n$self.state = $observable({\n  bookmarkStyle: \"\",\n})\n\n// 默认书签列表\nconst defualtList = [\n  {\n    id: Date.now(),\n    title: \"React\",\n    url: \"https://zh-hans.react.dev/learn\",\n  },\n  {\n    id: Date.now() + 1,\n    title: \"Vue\",\n    url: \"https://cn.vuejs.org/v2/guide/index.html\",\n  },\n]\n\n// 获取书签样式\n$self.getBookmarkStyle = async () => {\n  if ($self.state.bookmarkStyle) {\n    // 返回内存缓存的书签样式\n    return $self.state.bookmarkStyle\n  }\n\n  let res = null\n  try {\n    res = await $chrome.localStorage.getItem(cacheKeyBookmarkStyle)\n  } catch (e) {\n    $logger.info(\"获取书签样式失败\", e)\n  }\n\n  $self.state.bookmarkStyle = res || defaultBookmarkStyle\n  return $self.state.bookmarkStyle\n}\n\n// 修改书签样式\n$self.updateBookmarkStyle = async (bookmarkStyle) => {\n  try {\n    await $chrome.localStorage.setItem(cacheKeyBookmarkStyle, bookmarkStyle)\n\n    $self.state.bookmarkStyle = bookmarkStyle\n\n    // $self.refreshBookmarkListAndTable()\n  } catch (e) {\n    $logger.info(\"修改书签数据失败\", e)\n  }\n}\n\n// 展示书签管理对话框\n$self.showBookmarkManageDialog = () => {\n  const bookmarkManageDialog = $self\n    .query(`${rootEntire}.bookmarkManageDialog`)\n    .take()\n  bookmarkManageDialog.setComponentProps({\n    open: true,\n  })\n}\n\n// 展示添加或书签对话框\n$self.showAddOrUpdateBookmarkDialog = (bookmark) => {\n  const addBookmarkDialog = $self\n    .query(`${rootEntire}.addBookmarkDialog`)\n    .take()\n  addBookmarkDialog.value = {\n    ...(bookmark || {}),\n  }\n  addBookmarkDialog.setComponentProps({\n    open: true,\n    title: `${bookmark ? \"修改\" : \"添加\"}书签`,\n  })\n}\n\n// 添加或修改书签\n$self.addOrUpdateBookmark = async (bookmark) => {\n  const list = await $self.fetchBookmarkList()\n\n  if (bookmark.id) {\n    // 修改\n    const index = list.findIndex((item) => item.id === bookmark.id)\n    list[index] = bookmark\n  } else {\n    // 添加\n    bookmark.id = Date.now()\n    list.push(bookmark)\n  }\n\n  try {\n    await $chrome.localStorage.setItem(\n      cacheKeyBookmarkList,\n      JSON.stringify(list)\n    )\n\n    $self.refreshBookmarkListAndTable()\n  } catch (e) {\n    $logger.info(`${bookmark.id ? \"修改\" : \"添加\"}书签数据失败`, e)\n  }\n}\n\n// 删除书签\n$self.deleteBookmark = async (bookmark) => {\n  let list = await $self.fetchBookmarkList()\n  list = list.filter((item) => item.id !== bookmark.id)\n  $self.saveBookmarkList(list)\n}\n\n// 往前移动书签\n$self.moveUpBookmark = async (bookmark) => {\n  let list = await $self.fetchBookmarkList()\n\n  const index = list.findIndex((item) => item.id === bookmark.id)\n  let preIndex = index - 1\n  if (preIndex === -1) {\n    // 已经是第一条，则和最后一条互换\n    preIndex = list.length - 1\n  }\n\n  const other = list[preIndex]\n  list[preIndex] = bookmark\n  list[index] = other\n  $self.saveBookmarkList(list)\n}\n\n// 往后移动书签\n$self.moveDownBookmark = async (bookmark) => {\n  let list = await $self.fetchBookmarkList()\n\n  const index = list.findIndex((item) => item.id === bookmark.id)\n  let nextIndex = index + 1\n  if (nextIndex === list.length) {\n    // 已经是最后一条，则和第一条互换\n    nextIndex = 0\n  }\n\n  const other = list[nextIndex]\n  list[nextIndex] = bookmark\n  list[index] = other\n\n  $self.saveBookmarkList(list)\n}\n\n// 保存书签列表数据\n$self.saveBookmarkList = async (bookmarkList) => {\n  try {\n    await $chrome.localStorage.setItem(\n      cacheKeyBookmarkList,\n      JSON.stringify(bookmarkList)\n    )\n\n    $self.refreshBookmarkListAndTable()\n  } catch (e) {\n    $logger.info(`保存书签列表数据失败`, e)\n  }\n}\n\n// 获取书签列表\n$self.fetchBookmarkList = async () => {\n  let res = null\n  try {\n    res = await $chrome.localStorage.getItem(cacheKeyBookmarkList)\n  } catch (e) {\n    $logger.info(\"获取书签列表失败\", e)\n    return []\n  }\n\n  if (!res) {\n    $self.saveBookmarkList(defualtList)\n    return defualtList\n  }\n\n  try {\n    const bookmarkCardData = JSON.parse(res) || []\n    console.log(\"bookmarkCardData\", bookmarkCardData)\n    return bookmarkCardData\n  } catch (e) {\n    $logger.info(\"解析书签列表数据失败\", e)\n    return []\n  }\n}\n\n// 刷新书签列表和管理表格\n$self.refreshBookmarkListAndTable = async () => {\n  const bookmarkCardData = await $self.fetchBookmarkList()\n\n  const bookmarkIteratorLayout = $self\n    .query(`${rootEntire}.bookmarkIteratorLayout`)\n    .take()\n  if (bookmarkIteratorLayout) {\n    // 先清空再重新赋值，负责书签图标不会更新\n    bookmarkIteratorLayout.value = []\n    bookmarkIteratorLayout.value = bookmarkCardData\n  }\n  window.bookmarkIteratorLayout = bookmarkIteratorLayout\n\n  const bookmarkTable = $self.query(`${rootEntire}.*.bookmarkTable`).take()\n  if (bookmarkTable) {\n    bookmarkTable.value = bookmarkCardData\n  }\n}\n\n// 先调用下获取书签样式方法，获取成功后再展示列表，方便后续快速获取\n$self.getBookmarkStyle().then(() => {\n  $self.refreshBookmarkListAndTable()\n})\n"
      }
    },
    "properties": {
      "bookmarkCardTitleDiv": {
        "type": "void",
        "x-component": "Div",
        "x-component-props": {
          "style": {
            "display": "flex",
            "flexDirection": "row",
            "alignItems": "center",
            "margin": "0px 0px 0px 0px",
            "padding": "8px 10px 8px 10px",
            "justifyContent": "space-between"
          }
        },
        "x-designable-id": "ef8rd8lx2ae",
        "x-index": 0,
        "name": "bookmarkCardTitleDiv",
        "properties": {
          "bookmarkCardTitleLeftDiv": {
            "type": "void",
            "x-component": "Div",
            "x-component-props": {
              "style": {
                "display": "flex",
                "flexDirection": "row",
                "alignItems": "center",
                "margin": "0px 0px 0px 0px",
                "padding": "0px 0px 0px 0px",
                "justifyContent": "flex-start"
              }
            },
            "x-designable-id": "7xpai0xh2by",
            "x-index": 0,
            "name": "bookmarkCardTitleLeftDiv",
            "properties": {
              "bookmarkCardTitle": {
                "type": "string",
                "x-component": "Text",
                "x-validator": [],
                "x-component-props": {
                  "content": "书签卡片",
                  "style": {
                    "fontSize": "16px",
                    "fontWeight": 700,
                    "margin": "0px 0px 0px 0px"
                  }
                },
                "x-designable-id": "ct4vu8tgtt9",
                "x-index": 0,
                "x-reactions": {
                  "dependencies": [
                    {
                      "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                      "property": "value",
                      "type": "any"
                    }
                  ],
                  "fulfill": {
                    "run": ""
                  }
                },
                "name": "bookmarkCardTitle"
              }
            }
          },
          "bookmarkCardTitleRightDiv": {
            "type": "void",
            "x-component": "Div",
            "x-component-props": {
              "style": {
                "display": "flex",
                "flexDirection": "row"
              }
            },
            "x-designable-id": "fl7mda7cb57",
            "x-index": 1,
            "name": "bookmarkCardTitleRightDiv",
            "properties": {
              "bookmarkManageBtn": {
                "type": "string",
                "x-component": "Button",
                "x-reactions": {
                  "fulfill": {
                    "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    rootField.showBookmarkManageDialog()\n  },\n})\n"
                  },
                  "dependencies": [
                    {
                      "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                      "property": "value",
                      "type": "any"
                    }
                  ]
                },
                "x-validator": [],
                "x-component-props": {
                  "children": "",
                  "target": "_blank",
                  "icon": "SettingOutlined",
                  "type": "default",
                  "style": {
                    "margin": "0px 0px 0px 12px"
                  }
                },
                "x-designable-id": "n37r496ojuf",
                "x-index": 0,
                "name": "bookmarkManageBtn"
              },
              "addBookmarkBtn": {
                "type": "string",
                "x-component": "Button",
                "x-reactions": {
                  "fulfill": {
                    "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    rootField.showAddOrUpdateBookmarkDialog(null)\n  },\n})\n"
                  },
                  "dependencies": [
                    {
                      "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                      "property": "value",
                      "type": "any"
                    }
                  ]
                },
                "x-validator": [],
                "x-component-props": {
                  "children": "",
                  "target": "_blank",
                  "icon": "PlusCircleOutlined",
                  "type": "default",
                  "style": {
                    "margin": "0px 0px 0px 12px"
                  }
                },
                "x-designable-id": "mxdoh90e2ns",
                "x-index": 1,
                "name": "addBookmarkBtn"
              }
            }
          }
        }
      },
      "669y7jb5ewz": {
        "type": "string",
        "x-component": "Divider",
        "x-validator": [],
        "x-component-props": {
          "children": "",
          "style": {
            "margin": "4px 0px 4px 0px"
          }
        },
        "x-designable-id": "669y7jb5ewz",
        "x-index": 1
      },
      "bookmarkIteratorLayout": {
        "type": "array",
        "x-component": "IteratorLayout",
        "x-component-props": {
          "style": {
            "display": "grid",
            "gridTemplateColumns": "repeat(auto-fill, 120px)",
            "justifyContent": "space-between",
            "gap": "10px"
          }
        },
        "default": [],
        "x-validator": [],
        "x-designable-id": "1vtkmhkh12h",
        "x-index": 2,
        "name": "bookmarkIteratorLayout",
        "x-reactions": {
          "dependencies": [
            {
              "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
              "property": "value",
              "type": "any"
            }
          ],
          "fulfill": {
            "run": ""
          }
        },
        "items": {
          "type": "object",
          "x-designable-id": "4emwz2uvq26",
          "x-validator": [],
          "properties": {
            "verticalImgAndText": {
              "type": "void",
              "x-component": "Div",
              "x-component-props": {
                "style": {
                  "cursor": "pointer",
                  "display": "flex",
                  "flexDirection": "column",
                  "alignItems": "center",
                  "padding": "8px 0px 8px 0px"
                }
              },
              "x-reactions": {
                "fulfill": {
                  "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$effect(() => {\n  $self.hidden = rootField.state.bookmarkStyle !== \"verticalImgAndText\"\n}, [rootField.state.bookmarkStyle])\n\n$props({\n  onClick: () => {\n    // 处理点击指定的循环类组件的条目链接，默认就是取的条目的 url 字段来打开\n    $utils.clickArrayFieldUrlItem($self)\n  },\n})\n"
                },
                "dependencies": [
                  {
                    "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                    "property": "value",
                    "type": "any"
                  }
                ]
              },
              "x-designable-id": "4vj5d7ctp68",
              "x-index": 0,
              "name": "verticalImgAndText",
              "properties": {
                "icon": {
                  "type": "string",
                  "x-component": "Img",
                  "x-component-props": {
                    "style": {
                      "width": "40px",
                      "height": "40px"
                    },
                    "objectFit": "contain"
                  },
                  "name": "icon",
                  "x-reactions": {
                    "dependencies": [
                      {
                        "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                        "property": "value",
                        "type": "any"
                      }
                    ],
                    "fulfill": {
                      "run": "$effect(() => {\n  // 获取迭代器布局中当前点击的条目数据\n  const row = $utils.getArrayFieldRow($self)\n  // 获取书签的图标地址\n  $utils.getBookmarkIconUrl(row.url, row.icon).then((iconUrl) => {\n    $props({\n      src: iconUrl,\n    })\n  })\n}, [])\n"
                    }
                  },
                  "x-designable-id": "hko4p5bgxab",
                  "x-index": 0,
                  "x-validator": []
                },
                "title": {
                  "type": "string",
                  "x-component": "Text",
                  "name": "title",
                  "x-designable-id": "yvvkq8wv9sb",
                  "x-index": 1,
                  "x-validator": [],
                  "x-component-props": {}
                }
              }
            },
            "horizontalImgAndText": {
              "type": "void",
              "x-component": "Div",
              "x-component-props": {
                "style": {
                  "cursor": "pointer",
                  "display": "flex",
                  "flexDirection": "row",
                  "alignItems": "center",
                  "padding": "8px 10px 8px 10px"
                }
              },
              "x-reactions": {
                "fulfill": {
                  "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$effect(() => {\n  $self.hidden = rootField.state.bookmarkStyle !== \"horizontalImgAndText\"\n}, [rootField.state.bookmarkStyle])\n\n$props({\n  onClick: () => {\n    // 处理点击指定的循环类组件的条目链接，默认就是取的条目的 url 字段来打开\n    $utils.clickArrayFieldUrlItem($self)\n  },\n})\n"
                },
                "dependencies": [
                  {
                    "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                    "property": "value",
                    "type": "any"
                  }
                ]
              },
              "x-designable-id": "bt24ujfisqw",
              "x-index": 1,
              "name": "horizontalImgAndText",
              "properties": {
                "icon": {
                  "type": "string",
                  "x-component": "Img",
                  "x-component-props": {
                    "style": {
                      "width": "30px",
                      "height": "30px",
                      "margin": "0px 8px 0px 0px"
                    },
                    "objectFit": "contain"
                  },
                  "name": "icon",
                  "x-reactions": {
                    "dependencies": [
                      {
                        "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                        "property": "value",
                        "type": "any"
                      }
                    ],
                    "fulfill": {
                      "run": "$effect(() => {\n  // 获取迭代器布局中当前点击的条目数据\n  const row = $utils.getArrayFieldRow($self)\n  // 获取书签的图标地址\n  $utils.getBookmarkIconUrl(row.url, row.icon).then((iconUrl) => {\n    $props({\n      src: iconUrl,\n    })\n  })\n}, [])\n"
                    }
                  },
                  "x-validator": [],
                  "x-designable-id": "f92u9kxq4nr",
                  "x-index": 0
                },
                "title": {
                  "type": "string",
                  "x-component": "Text",
                  "name": "title",
                  "x-component-props": {},
                  "x-designable-id": "3ry52koycu3",
                  "x-index": 1,
                  "x-validator": []
                }
              }
            },
            "title": {
              "type": "string",
              "x-component": "Button",
              "x-component-props": {
                "target": "_blank",
                "type": "link",
                "children": "超链接"
              },
              "name": "title",
              "x-reactions": {
                "dependencies": [
                  {
                    "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                    "property": "value",
                    "type": "any"
                  }
                ],
                "fulfill": {
                  "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$effect(() => {\n  $self.hidden = rootField.state.bookmarkStyle !== \"onlyText\"\n}, [rootField.state.bookmarkStyle])\n\n$props({\n  onClick: () => {\n    // 处理点击指定的循环类组件的条目链接，默认就是取的条目的 url 字段来打开\n    $utils.clickArrayFieldUrlItem($self)\n  },\n})\n"
                }
              },
              "x-designable-id": "8puit0com2w",
              "x-index": 2,
              "x-validator": []
            }
          }
        }
      },
      "bookmarkManageDialog": {
        "type": "object",
        "x-component": "Modal",
        "x-reactions": {
          "fulfill": {
            "run": "$props({\n  // 点击取消按钮\n  onCancel: () => {\n    $self.componentProps.open = false\n  },\n  // 点击确认按钮\n  onOk: () => {\n    $self.componentProps.open = false\n  },\n})\n"
          }
        },
        "x-component-props": {
          "cancelButtonProps": {
            "hidden": true
          },
          "cancelText": "取消",
          "okButtonProps": {},
          "okText": "确定",
          "classNames": {},
          "styles": {},
          "title": "书签管理",
          "width": 700
        },
        "name": "bookmarkManageDialog",
        "x-designable-id": "ou6trmuiigb",
        "x-index": 3,
        "properties": {
          "bookmarkStyle": {
            "title": "书签样式",
            "x-decorator": "FormItem",
            "x-component": "Select",
            "x-validator": [],
            "x-component-props": {},
            "x-decorator-props": {},
            "name": "bookmarkStyle",
            "enum": [
              {
                "children": [],
                "label": "纵向图文",
                "value": "verticalImgAndText"
              },
              {
                "children": [],
                "label": "横向图文",
                "value": "horizontalImgAndText"
              },
              {
                "children": [],
                "label": "纯文本",
                "value": "onlyText"
              }
            ],
            "x-reactions": {
              "dependencies": [
                {
                  "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                  "property": "value",
                  "type": "any"
                }
              ],
              "fulfill": {
                "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n// 回填数据\n$self.value = rootField.state.bookmarkStyle\n\n$props({\n  // 监听到书签样式变更\n  onChange: async (bookmarkStyle) => {\n    // 更新书签样式\n    await rootField.updateBookmarkStyle(bookmarkStyle)\n  },\n})\n"
              }
            },
            "x-designable-id": "uw3sr5huolc",
            "x-index": 0
          },
          "bookmarkTable": {
            "type": "array",
            "x-decorator": "FormItem",
            "x-component": "ArrayTable",
            "x-validator": [],
            "x-component-props": {
              "bordered": false,
              "showHeader": true,
              "tableLayout": "fixed",
              "style": {
                "margin": "0px 10px 0px 10px"
              }
            },
            "x-decorator-props": {},
            "x-reactions": {
              "dependencies": [
                {
                  "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                  "property": "value",
                  "type": "any"
                }
              ],
              "fulfill": {
                "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\nrootField.refreshBookmarkListAndTable()\n"
              }
            },
            "x-designable-id": "iw0eqd0q2w3",
            "x-index": 1,
            "name": "bookmarkTable",
            "items": {
              "type": "object",
              "x-designable-id": "1b9rl4quqgn",
              "x-validator": [],
              "properties": {
                "titleColumn": {
                  "type": "void",
                  "x-component": "ArrayTable.Column",
                  "x-component-props": {
                    "title": "书签名称",
                    "width": 150
                  },
                  "x-designable-id": "wm1kqkje7fq",
                  "x-index": 0,
                  "name": "titleColumn",
                  "properties": {
                    "title": {
                      "type": "string",
                      "x-component": "Text",
                      "x-validator": [],
                      "x-component-props": {},
                      "name": "title",
                      "x-designable-id": "nwo3ybeyi8w",
                      "x-index": 0
                    }
                  }
                },
                "urlColumn": {
                  "type": "void",
                  "x-component": "ArrayTable.Column",
                  "x-component-props": {
                    "title": "书签地址"
                  },
                  "x-designable-id": "hcs0cj2130y",
                  "x-index": 1,
                  "name": "urlColumn",
                  "properties": {
                    "url": {
                      "type": "string",
                      "x-component": "Text",
                      "x-validator": [],
                      "x-component-props": {
                        "content": ""
                      },
                      "name": "url",
                      "x-designable-id": "cqegu75zshy",
                      "x-index": 0
                    }
                  }
                },
                "operateColumn": {
                  "type": "void",
                  "x-component": "ArrayTable.Column",
                  "x-component-props": {
                    "title": "操作",
                    "width": 170
                  },
                  "x-designable-id": "kmov0p5frh4",
                  "x-index": 2,
                  "name": "operateColumn",
                  "properties": {
                    "deleteBookmarkBtn": {
                      "type": "string",
                      "x-component": "Button",
                      "x-reactions": {
                        "fulfill": {
                          "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.deleteBookmark(row)\n  },\n})\n"
                        },
                        "dependencies": [
                          {
                            "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                            "property": "value",
                            "type": "any"
                          }
                        ]
                      },
                      "x-validator": [],
                      "x-component-props": {
                        "children": "",
                        "target": "_blank",
                        "icon": "DeleteOutlined",
                        "style": {
                          "margin": "0px 0px 0px 0px"
                        }
                      },
                      "x-designable-id": "lm9jp7lirla",
                      "x-index": 0,
                      "name": "deleteBookmarkBtn"
                    },
                    "moveUpBookmarkBtn": {
                      "type": "string",
                      "x-component": "Button",
                      "x-reactions": {
                        "fulfill": {
                          "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.moveUpBookmark(row)\n  },\n})\n"
                        },
                        "dependencies": [
                          {
                            "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                            "property": "value",
                            "type": "any"
                          }
                        ]
                      },
                      "x-validator": [],
                      "x-component-props": {
                        "children": "",
                        "target": "_blank",
                        "icon": "ArrowUpOutlined",
                        "style": {
                          "margin": "0px 0px 0px 6px"
                        }
                      },
                      "x-designable-id": "asytmyipxsx",
                      "x-index": 1,
                      "name": "moveUpBookmarkBtn"
                    },
                    "moveDownBookmarkBtn": {
                      "type": "string",
                      "x-component": "Button",
                      "x-reactions": {
                        "fulfill": {
                          "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.moveDownBookmark(row)\n  },\n})\n"
                        },
                        "dependencies": [
                          {
                            "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                            "property": "value",
                            "type": "any"
                          }
                        ]
                      },
                      "x-validator": [],
                      "x-component-props": {
                        "children": "",
                        "target": "_blank",
                        "icon": "ArrowDownOutlined",
                        "style": {
                          "margin": "0px 0px 0px 6px"
                        }
                      },
                      "x-designable-id": "zxi80mizvjy",
                      "x-index": 2,
                      "name": "moveDownBookmarkBtn"
                    },
                    "editBookmarkBtn": {
                      "type": "string",
                      "x-component": "Button",
                      "x-reactions": {
                        "fulfill": {
                          "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  onClick: () => {\n    const row = $utils.getArrayFieldRow($self, \"ArrayTable\")\n    rootField.showAddOrUpdateBookmarkDialog(row)\n  },\n})\n"
                        },
                        "dependencies": [
                          {
                            "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
                            "property": "value",
                            "type": "any"
                          }
                        ]
                      },
                      "x-validator": [],
                      "x-component-props": {
                        "children": "",
                        "target": "_blank",
                        "icon": "EditOutlined",
                        "style": {
                          "margin": "0px 0px 0px 6px"
                        }
                      },
                      "x-designable-id": "s0uci4fi3f6",
                      "x-index": 3,
                      "name": "editBookmarkBtn"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "addBookmarkDialog": {
        "type": "object",
        "x-component": "Modal",
        "x-reactions": {
          "fulfill": {
            "run": "const rootName = \"bookmarkCardDiv\"\nconst rootEntire = $self.address.entire.substring(\n  0,\n  $self.address.entire.indexOf(rootName) + rootName.length\n)\nconst rootField = $self.query(rootEntire).take()\n\n$props({\n  // 点击取消按钮\n  onCancel: () => {\n    $self.componentProps.open = false\n  },\n  // 点击确认按钮\n  onOk: () => {\n    $self\n      .validate() // 校验\n      .then(async () => {\n        const bookmarkForm = $self.value\n        $logger.info(\"$self.value\", bookmarkForm)\n\n        // 添加或更新书签\n        await rootField.addOrUpdateBookmark({\n          ...bookmarkForm,\n        })\n\n        // 关闭当前对话框\n        $self.componentProps.open = false\n      })\n      .catch((e) => {\n        $logger.info(\"表单校验失败\", e)\n      })\n  },\n})\n"
          },
          "dependencies": [
            {
              "__DO_NOT_USE_THIS_PROPERTY_index__": 0,
              "property": "value",
              "type": "any"
            }
          ]
        },
        "x-component-props": {
          "cancelButtonProps": {},
          "cancelText": "取消",
          "okButtonProps": {},
          "okText": "确定",
          "classNames": {},
          "styles": {},
          "title": "添加书签",
          "zIndex": 1001
        },
        "name": "addBookmarkDialog",
        "x-designable-id": "ic32qip89qq",
        "x-index": 4,
        "properties": {
          "title": {
            "type": "string",
            "title": "书签名称",
            "x-decorator": "FormItem",
            "x-component": "Input",
            "x-validator": [],
            "x-component-props": {
              "placeholder": "请输入书签名称"
            },
            "x-decorator-props": {},
            "name": "title",
            "required": true,
            "x-designable-id": "obav5t0jz55",
            "x-index": 0
          },
          "url": {
            "type": "string",
            "title": "书签地址",
            "x-decorator": "FormItem",
            "x-component": "Input",
            "x-validator": [],
            "x-component-props": {
              "placeholder": "请输入书签地址"
            },
            "x-decorator-props": {},
            "required": true,
            "name": "url",
            "x-designable-id": "iyil440qupg",
            "x-index": 1
          }
        }
      }
    }
  }